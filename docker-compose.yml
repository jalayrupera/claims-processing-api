services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file: .env # Load all variables from .env for the application
    environment:
      # Explicitly pass DB connection details (can also rely on env_file)
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      # Explicitly pass Loki details (can also rely on env_file)
      - LOKI_HOST=${LOKI_HOST}
      - LOKI_PORT=${LOKI_PORT}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    volumes:
      - ./logs:/var/log/api
    networks:
      - app-network
      - monitoring-network

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./logs/postgres:/var/log/postgresql:rw
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      # Enable logging
      - POSTGRESQL_LOG_FILE=/var/log/postgresql/postgresql.log
      - POSTGRESQL_LOG_ROTATION_SIZE=10MB
      - POSTGRESQL_LOG_ROTATION_AGE=1d
    command: [ "postgres", "-c", "logging_collector=on", "-c", "log_destination=stderr,csvlog", "-c", "log_directory=/var/log/postgresql", "-c", "log_filename=postgresql-%Y-%m-%d_%H%M%S.log", "-c", "log_statement=all", "-c", "log_connections=on", "-c", "log_disconnections=on" ]
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:v2.47.0
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitoring-network
    depends_on:
      - alertmanager

  alertmanager:
    image: prom/alertmanager:v0.25.0
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ./config/alertmanager/templates:/etc/alertmanager/templates
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--log.level=debug'
    env_file: .env
    networks:
      - monitoring-network

  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3000:3000"
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}
    networks:
      - monitoring-network
    depends_on:
      - prometheus
      - loki

  loki:
    image: grafana/loki:2.9.0
    volumes:
      - ./config/loki.yaml:/etc/loki/loki.yaml
      - loki_data:/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki.yaml
    user: root
    networks:
      - monitoring-network

  promtail:
    image: grafana/promtail:2.9.0
    volumes:
      - ./config/promtail.yaml:/etc/promtail/config.yaml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/var/log/api:ro
      - ./logs/postgres:/var/log/postgresql:ro
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - monitoring-network
    depends_on:
      - loki

  node-exporter:
    image: prom/node-exporter:v1.6.1
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - monitoring-network

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.14.0
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/postgres?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - monitoring-network
    depends_on:
      - db
      
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - monitoring-network

networks:
  app-network:
  monitoring-network:

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  loki_data:
